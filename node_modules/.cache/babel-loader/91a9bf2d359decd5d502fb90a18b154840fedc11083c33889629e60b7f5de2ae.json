{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize } from 'vue';\nimport { filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n    title = _ref.title,\n    _title = _ref._title,\n    key = _ref.key,\n    children = _ref.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var treeNodes = filterEmpty(node);\n    return treeNodes.map(function (treeNode) {\n      var _a, _b, _c, _d;\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var slots = treeNode.children || {};\n      var key = treeNode.key;\n      var props = {};\n      for (var _i = 0, _Object$entries = Object.entries(treeNode.props); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          k = _Object$entries$_i[0],\n          v = _Object$entries$_i[1];\n        props[camelize(k)] = v;\n      }\n      var isLeaf = props.isLeaf,\n        checkable = props.checkable,\n        selectable = props.selectable,\n        disabled = props.disabled,\n        disableCheckbox = props.disableCheckbox;\n      // 默认值为 undefined\n      var newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n      var slotsProps = _extends(_extends({}, props), newProps);\n      var _props$title = props.title,\n        title = _props$title === void 0 ? (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots, slotsProps) : _props$title,\n        _props$icon = props.icon,\n        icon = _props$icon === void 0 ? (_b = slots.icon) === null || _b === void 0 ? void 0 : _b.call(slots, slotsProps) : _props$icon,\n        _props$switcherIcon = props.switcherIcon,\n        switcherIcon = _props$switcherIcon === void 0 ? (_c = slots.switcherIcon) === null || _c === void 0 ? void 0 : _c.call(slots, slotsProps) : _props$switcherIcon,\n        rest = __rest(props, [\"title\", \"icon\", \"switcherIcon\"]);\n      var children = (_d = slots[\"default\"]) === null || _d === void 0 ? void 0 : _d.call(slots);\n      var dataNode = _extends(_extends(_extends({}, rest), {\n        title: title,\n        icon: icon,\n        switcherIcon: switcherIcon,\n        key: key,\n        isLeaf: isLeaf\n      }), newProps);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n      // Add FlattenDataNode into list\n      var flattenNode = _extends(_extends({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    }\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref2.initWrapper,\n    processEntity = _ref2.processEntity,\n    onProcessFinished = _ref2.onProcessFinished,\n    externalGetKey = _ref2.externalGetKey,\n    childrenPropName = _ref2.childrenPropName,\n    fieldNames = _ref2.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeysSet = _ref3.expandedKeysSet,\n    selectedKeysSet = _ref3.selectedKeysSet,\n    loadedKeysSet = _ref3.loadedKeysSet,\n    loadingKeysSet = _ref3.loadingKeysSet,\n    checkedKeysSet = _ref3.checkedKeysSet,\n    halfCheckedKeysSet = _ref3.halfCheckedKeysSet,\n    dragOverNodeKey = _ref3.dragOverNodeKey,\n    dropPosition = _ref3.dropPosition,\n    keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = _extends(_extends({\n    dataRef: data\n  }, data), {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    eventKey: eventKey,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}","map":{"version":3,"names":["_typeof","_toConsumableArray","_extends","_slicedToArray","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","getPosition","isTreeNode","warning","camelize","filterEmpty","omit","getKey","key","pos","undefined","fillFieldNames","fieldNames","_ref","title","_title","children","mergedTitle","warningWithoutKey","treeData","keys","Map","dig","list","path","arguments","forEach","treeNode","concat","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_a","_b","_c","_d","slots","props","_i","_Object$entries","entries","_Object$entries$_i","k","v","isLeaf","checkable","selectable","disabled","disableCheckbox","newProps","slotsProps","_props$title","_props$icon","icon","_props$switcherIcon","switcherIcon","rest","dataNode","parsedChildren","flattenTreeData","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","index","mergedKey","fieldTitle","flattenNode","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","config","mergedConfig","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","parentPos","level","nodes","subNode","subIndex","convertDataToEntities","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref3","expandedKeysSet","selectedKeysSet","loadedKeysSet","loadingKeysSet","checkedKeysSet","halfCheckedKeysSet","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","dataRef","defineProperty","get"],"sources":["/home/aaz_alan/work/wrap_widget/node_modules/ant-design-vue/es/vc-tree/utils/treeUtil.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize } from 'vue';\nimport { filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n    title = _ref.title,\n    _title = _ref._title,\n    key = _ref.key,\n    children = _ref.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var treeNodes = filterEmpty(node);\n    return treeNodes.map(function (treeNode) {\n      var _a, _b, _c, _d;\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var slots = treeNode.children || {};\n      var key = treeNode.key;\n      var props = {};\n      for (var _i = 0, _Object$entries = Object.entries(treeNode.props); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          k = _Object$entries$_i[0],\n          v = _Object$entries$_i[1];\n        props[camelize(k)] = v;\n      }\n      var isLeaf = props.isLeaf,\n        checkable = props.checkable,\n        selectable = props.selectable,\n        disabled = props.disabled,\n        disableCheckbox = props.disableCheckbox;\n      // 默认值为 undefined\n      var newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n      var slotsProps = _extends(_extends({}, props), newProps);\n      var _props$title = props.title,\n        title = _props$title === void 0 ? (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots, slotsProps) : _props$title,\n        _props$icon = props.icon,\n        icon = _props$icon === void 0 ? (_b = slots.icon) === null || _b === void 0 ? void 0 : _b.call(slots, slotsProps) : _props$icon,\n        _props$switcherIcon = props.switcherIcon,\n        switcherIcon = _props$switcherIcon === void 0 ? (_c = slots.switcherIcon) === null || _c === void 0 ? void 0 : _c.call(slots, slotsProps) : _props$switcherIcon,\n        rest = __rest(props, [\"title\", \"icon\", \"switcherIcon\"]);\n      var children = (_d = slots.default) === null || _d === void 0 ? void 0 : _d.call(slots);\n      var dataNode = _extends(_extends(_extends({}, rest), {\n        title: title,\n        icon: icon,\n        switcherIcon: switcherIcon,\n        key: key,\n        isLeaf: isLeaf\n      }), newProps);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n      // Add FlattenDataNode into list\n      var flattenNode = _extends(_extends({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    }\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref2.initWrapper,\n    processEntity = _ref2.processEntity,\n    onProcessFinished = _ref2.onProcessFinished,\n    externalGetKey = _ref2.externalGetKey,\n    childrenPropName = _ref2.childrenPropName,\n    fieldNames = _ref2.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeysSet = _ref3.expandedKeysSet,\n    selectedKeysSet = _ref3.selectedKeysSet,\n    loadedKeysSet = _ref3.loadedKeysSet,\n    loadingKeysSet = _ref3.loadingKeysSet,\n    checkedKeysSet = _ref3.checkedKeysSet,\n    halfCheckedKeysSet = _ref3.halfCheckedKeysSet,\n    dragOverNodeKey = _ref3.dragOverNodeKey,\n    dropPosition = _ref3.dropPosition,\n    keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = _extends(_extends({\n    dataRef: data\n  }, data), {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    eventKey: eventKey,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,OAAO,MAAM,mCAAmC;AACvD,OAAOC,kBAAkB,MAAM,8CAA8C;AAC7E,OAAOC,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,cAAc,MAAM,0CAA0C;AACrE,IAAIC,MAAM,GAAG,IAAI,IAAI,IAAI,CAACA,MAAM,IAAI,UAAUC,CAAC,EAAEC,CAAC,EAAE;EAClD,IAAIC,CAAC,GAAG,CAAC,CAAC;EACV,KAAK,IAAIC,CAAC,IAAIH,CAAC,EAAE,IAAII,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACP,CAAC,EAAEG,CAAC,CAAC,IAAIF,CAAC,CAACO,OAAO,CAACL,CAAC,CAAC,GAAG,CAAC,EAAED,CAAC,CAACC,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,CAAC;EAChG,IAAIH,CAAC,IAAI,IAAI,IAAI,OAAOI,MAAM,CAACK,qBAAqB,KAAK,UAAU,EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEP,CAAC,GAAGC,MAAM,CAACK,qBAAqB,CAACT,CAAC,CAAC,EAAEU,CAAC,GAAGP,CAAC,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3I,IAAIT,CAAC,CAACO,OAAO,CAACL,CAAC,CAACO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIN,MAAM,CAACC,SAAS,CAACO,oBAAoB,CAACL,IAAI,CAACP,CAAC,EAAEG,CAAC,CAACO,CAAC,CAAC,CAAC,EAAER,CAAC,CAACC,CAAC,CAACO,CAAC,CAAC,CAAC,GAAGV,CAAC,CAACG,CAAC,CAACO,CAAC,CAAC,CAAC;EACnG;EACA,OAAOR,CAAC;AACV,CAAC;AACD,SAASW,WAAW,EAAEC,UAAU,QAAQ,SAAS;AACjD,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,QAAQ,QAAQ,KAAK;AAC9B,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAO,SAASC,MAAMA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC/B,IAAID,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE;IACrC,OAAOF,GAAG;EACZ;EACA,OAAOC,GAAG;AACZ;AACA,OAAO,SAASE,cAAcA,CAACC,UAAU,EAAE;EACzC,IAAIC,IAAI,GAAGD,UAAU,IAAI,CAAC,CAAC;IACzBE,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBP,GAAG,GAAGK,IAAI,CAACL,GAAG;IACdQ,QAAQ,GAAGH,IAAI,CAACG,QAAQ;EAC1B,IAAIC,WAAW,GAAGH,KAAK,IAAI,OAAO;EAClC,OAAO;IACLA,KAAK,EAAEG,WAAW;IAClBF,MAAM,EAAEA,MAAM,IAAI,CAACE,WAAW,CAAC;IAC/BT,GAAG,EAAEA,GAAG,IAAI,KAAK;IACjBQ,QAAQ,EAAEA,QAAQ,IAAI;EACxB,CAAC;AACH;AACA;AACA;AACA;AACA,OAAO,SAASE,iBAAiBA,CAACC,QAAQ,EAAEP,UAAU,EAAE;EACtD,IAAIQ,IAAI,GAAG,IAAIC,GAAG,EAAE;EACpB,SAASC,GAAGA,CAACC,IAAI,EAAE;IACjB,IAAIC,IAAI,GAAGC,SAAS,CAAC1B,MAAM,GAAG,CAAC,IAAI0B,SAAS,CAAC,CAAC,CAAC,KAAKf,SAAS,GAAGe,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;IACjF,CAACF,IAAI,IAAI,EAAE,EAAEG,OAAO,CAAC,UAAUC,QAAQ,EAAE;MACvC,IAAInB,GAAG,GAAGmB,QAAQ,CAACf,UAAU,CAACJ,GAAG,CAAC;MAClC,IAAIQ,QAAQ,GAAGW,QAAQ,CAACf,UAAU,CAACI,QAAQ,CAAC;MAC5Cb,OAAO,CAACK,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE,sCAAsC,CAACkB,MAAM,CAACJ,IAAI,CAAC,CAACI,MAAM,CAACpB,GAAG,EAAE,GAAG,CAAC,CAAC;MAChH,IAAIqB,SAAS,GAAGC,MAAM,CAACtB,GAAG,CAAC;MAC3BL,OAAO,CAAC,CAACiB,IAAI,CAACW,GAAG,CAACF,SAAS,CAAC,IAAIrB,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE,gCAAgC,CAACkB,MAAM,CAACC,SAAS,CAAC,CAAC;MACtHT,IAAI,CAACY,GAAG,CAACH,SAAS,EAAE,IAAI,CAAC;MACzBP,GAAG,CAACN,QAAQ,EAAE,EAAE,CAACY,MAAM,CAACJ,IAAI,CAAC,CAACI,MAAM,CAACC,SAAS,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC;EACJ;EACAP,GAAG,CAACH,QAAQ,CAAC;AACf;AACA;AACA;AACA;AACA,OAAO,SAASc,iBAAiBA,CAACC,SAAS,EAAE;EAC3C,SAASZ,GAAGA,CAAA,EAAG;IACb,IAAIa,IAAI,GAAGV,SAAS,CAAC1B,MAAM,GAAG,CAAC,IAAI0B,SAAS,CAAC,CAAC,CAAC,KAAKf,SAAS,GAAGe,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;IACjF,IAAIW,SAAS,GAAG/B,WAAW,CAAC8B,IAAI,CAAC;IACjC,OAAOC,SAAS,CAACC,GAAG,CAAC,UAAUV,QAAQ,EAAE;MACvC,IAAIW,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;MAClB;MACA,IAAI,CAACvC,UAAU,CAACyB,QAAQ,CAAC,EAAE;QACzBxB,OAAO,CAAC,CAACwB,QAAQ,EAAE,qDAAqD,CAAC;QACzE,OAAO,IAAI;MACb;MACA,IAAIe,KAAK,GAAGf,QAAQ,CAACX,QAAQ,IAAI,CAAC,CAAC;MACnC,IAAIR,GAAG,GAAGmB,QAAQ,CAACnB,GAAG;MACtB,IAAImC,KAAK,GAAG,CAAC,CAAC;MACd,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,eAAe,GAAGrD,MAAM,CAACsD,OAAO,CAACnB,QAAQ,CAACgB,KAAK,CAAC,EAAEC,EAAE,GAAGC,eAAe,CAAC9C,MAAM,EAAE6C,EAAE,EAAE,EAAE;QACpG,IAAIG,kBAAkB,GAAG7D,cAAc,CAAC2D,eAAe,CAACD,EAAE,CAAC,EAAE,CAAC,CAAC;UAC7DI,CAAC,GAAGD,kBAAkB,CAAC,CAAC,CAAC;UACzBE,CAAC,GAAGF,kBAAkB,CAAC,CAAC,CAAC;QAC3BJ,KAAK,CAACvC,QAAQ,CAAC4C,CAAC,CAAC,CAAC,GAAGC,CAAC;MACxB;MACA,IAAIC,MAAM,GAAGP,KAAK,CAACO,MAAM;QACvBC,SAAS,GAAGR,KAAK,CAACQ,SAAS;QAC3BC,UAAU,GAAGT,KAAK,CAACS,UAAU;QAC7BC,QAAQ,GAAGV,KAAK,CAACU,QAAQ;QACzBC,eAAe,GAAGX,KAAK,CAACW,eAAe;MACzC;MACA,IAAIC,QAAQ,GAAG;QACbL,MAAM,EAAEA,MAAM,IAAIA,MAAM,KAAK,EAAE,IAAIxC,SAAS;QAC5CyC,SAAS,EAAEA,SAAS,IAAIA,SAAS,KAAK,EAAE,IAAIzC,SAAS;QACrD0C,UAAU,EAAEA,UAAU,IAAIA,UAAU,KAAK,EAAE,IAAI1C,SAAS;QACxD2C,QAAQ,EAAEA,QAAQ,IAAIA,QAAQ,KAAK,EAAE,IAAI3C,SAAS;QAClD4C,eAAe,EAAEA,eAAe,IAAIA,eAAe,KAAK,EAAE,IAAI5C;MAChE,CAAC;MACD,IAAI8C,UAAU,GAAGvE,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE0D,KAAK,CAAC,EAAEY,QAAQ,CAAC;MACxD,IAAIE,YAAY,GAAGd,KAAK,CAAC7B,KAAK;QAC5BA,KAAK,GAAG2C,YAAY,KAAK,KAAK,CAAC,GAAG,CAACnB,EAAE,GAAGI,KAAK,CAAC5B,KAAK,MAAM,IAAI,IAAIwB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC3C,IAAI,CAAC+C,KAAK,EAAEc,UAAU,CAAC,GAAGC,YAAY;QACnIC,WAAW,GAAGf,KAAK,CAACgB,IAAI;QACxBA,IAAI,GAAGD,WAAW,KAAK,KAAK,CAAC,GAAG,CAACnB,EAAE,GAAGG,KAAK,CAACiB,IAAI,MAAM,IAAI,IAAIpB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC5C,IAAI,CAAC+C,KAAK,EAAEc,UAAU,CAAC,GAAGE,WAAW;QAC/HE,mBAAmB,GAAGjB,KAAK,CAACkB,YAAY;QACxCA,YAAY,GAAGD,mBAAmB,KAAK,KAAK,CAAC,GAAG,CAACpB,EAAE,GAAGE,KAAK,CAACmB,YAAY,MAAM,IAAI,IAAIrB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC7C,IAAI,CAAC+C,KAAK,EAAEc,UAAU,CAAC,GAAGI,mBAAmB;QAC/JE,IAAI,GAAG3E,MAAM,CAACwD,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;MACzD,IAAI3B,QAAQ,GAAG,CAACyB,EAAE,GAAGC,KAAK,WAAQ,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC9C,IAAI,CAAC+C,KAAK,CAAC;MACvF,IAAIqB,QAAQ,GAAG9E,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE6E,IAAI,CAAC,EAAE;QACnDhD,KAAK,EAAEA,KAAK;QACZ6C,IAAI,EAAEA,IAAI;QACVE,YAAY,EAAEA,YAAY;QAC1BrD,GAAG,EAAEA,GAAG;QACR0C,MAAM,EAAEA;MACV,CAAC,CAAC,EAAEK,QAAQ,CAAC;MACb,IAAIS,cAAc,GAAG1C,GAAG,CAACN,QAAQ,CAAC;MAClC,IAAIgD,cAAc,CAACjE,MAAM,EAAE;QACzBgE,QAAQ,CAAC/C,QAAQ,GAAGgD,cAAc;MACpC;MACA,OAAOD,QAAQ;IACjB,CAAC,CAAC;EACJ;EACA,OAAOzC,GAAG,CAACY,SAAS,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS+B,eAAeA,CAACC,YAAY,EAAEC,YAAY,EAAEvD,UAAU,EAAE;EACtE,IAAIwD,eAAe,GAAGzD,cAAc,CAACC,UAAU,CAAC;IAC9CyD,WAAW,GAAGD,eAAe,CAACrD,MAAM;IACpCuD,QAAQ,GAAGF,eAAe,CAAC5D,GAAG;IAC9B+D,aAAa,GAAGH,eAAe,CAACpD,QAAQ;EAC1C,IAAIwD,cAAc,GAAG,IAAIC,GAAG,CAACN,YAAY,KAAK,IAAI,GAAG,EAAE,GAAGA,YAAY,CAAC;EACvE,IAAIO,WAAW,GAAG,EAAE;EACpB,SAASpD,GAAGA,CAACC,IAAI,EAAE;IACjB,IAAIoD,MAAM,GAAGlD,SAAS,CAAC1B,MAAM,GAAG,CAAC,IAAI0B,SAAS,CAAC,CAAC,CAAC,KAAKf,SAAS,GAAGe,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IACrF,OAAOF,IAAI,CAACc,GAAG,CAAC,UAAUV,QAAQ,EAAEiD,KAAK,EAAE;MACzC,IAAInE,GAAG,GAAGR,WAAW,CAAC0E,MAAM,GAAGA,MAAM,CAAClE,GAAG,GAAG,GAAG,EAAEmE,KAAK,CAAC;MACvD,IAAIC,SAAS,GAAGtE,MAAM,CAACoB,QAAQ,CAAC2C,QAAQ,CAAC,EAAE7D,GAAG,CAAC;MAC/C;MACA,IAAIQ,WAAW;MACf,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuE,WAAW,CAACtE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QAC9C,IAAIgF,UAAU,GAAGT,WAAW,CAACvE,CAAC,CAAC;QAC/B,IAAI6B,QAAQ,CAACmD,UAAU,CAAC,KAAKpE,SAAS,EAAE;UACtCO,WAAW,GAAGU,QAAQ,CAACmD,UAAU,CAAC;UAClC;QACF;MACF;MACA;MACA,IAAIC,WAAW,GAAG9F,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEqB,IAAI,CAACqB,QAAQ,EAAE,EAAE,CAACC,MAAM,CAAC5C,kBAAkB,CAACqF,WAAW,CAAC,EAAE,CAACC,QAAQ,EAAEC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE;QAC9HzD,KAAK,EAAEG,WAAW;QAClBT,GAAG,EAAEqE,SAAS;QACdF,MAAM,EAAEA,MAAM;QACdlE,GAAG,EAAEA,GAAG;QACRO,QAAQ,EAAE,IAAI;QACdgE,IAAI,EAAErD,QAAQ;QACdsD,OAAO,EAAE,EAAE,CAACrD,MAAM,CAAC5C,kBAAkB,CAAC2F,MAAM,GAAGA,MAAM,CAACM,OAAO,GAAG,EAAE,CAAC,EAAE,CAACL,KAAK,KAAK,CAAC,CAAC,CAAC;QACnFM,KAAK,EAAE,EAAE,CAACtD,MAAM,CAAC5C,kBAAkB,CAAC2F,MAAM,GAAGA,MAAM,CAACO,KAAK,GAAG,EAAE,CAAC,EAAE,CAACN,KAAK,KAAKrD,IAAI,CAACxB,MAAM,GAAG,CAAC,CAAC;MAC9F,CAAC,CAAC;MACF2E,WAAW,CAACS,IAAI,CAACJ,WAAW,CAAC;MAC7B;MACA,IAAIZ,YAAY,KAAK,IAAI,IAAIK,cAAc,CAACzC,GAAG,CAAC8C,SAAS,CAAC,EAAE;QAC1DE,WAAW,CAAC/D,QAAQ,GAAGM,GAAG,CAACK,QAAQ,CAAC4C,aAAa,CAAC,IAAI,EAAE,EAAEQ,WAAW,CAAC;MACxE,CAAC,MAAM;QACLA,WAAW,CAAC/D,QAAQ,GAAG,EAAE;MAC3B;MACA,OAAO+D,WAAW;IACpB,CAAC,CAAC;EACJ;EACAzD,GAAG,CAAC4C,YAAY,CAAC;EACjB,OAAOQ,WAAW;AACpB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,iBAAiBA,CAACC,SAAS,EAAEC,QAAQ;AACrD;AACAC,MAAM,EAAE;EACN,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrB,IAAIzG,OAAO,CAACwG,MAAM,CAAC,KAAK,QAAQ,EAAE;IAChCC,YAAY,GAAGD,MAAM;EACvB,CAAC,MAAM;IACLC,YAAY,GAAG;MACbC,cAAc,EAAEF;IAClB,CAAC;EACH;EACAC,YAAY,GAAGA,YAAY,IAAI,CAAC,CAAC;EACjC;EACA,IAAIE,aAAa,GAAGF,YAAY;IAC9BG,gBAAgB,GAAGD,aAAa,CAACC,gBAAgB;IACjDF,cAAc,GAAGC,aAAa,CAACD,cAAc;IAC7C7E,UAAU,GAAG8E,aAAa,CAAC9E,UAAU;EACvC,IAAIgF,gBAAgB,GAAGjF,cAAc,CAACC,UAAU,CAAC;IAC/C0D,QAAQ,GAAGsB,gBAAgB,CAACpF,GAAG;IAC/B+D,aAAa,GAAGqB,gBAAgB,CAAC5E,QAAQ;EAC3C,IAAI6E,qBAAqB,GAAGF,gBAAgB,IAAIpB,aAAa;EAC7D;EACA,IAAIuB,eAAe;EACnB,IAAIL,cAAc,EAAE;IAClB,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;MACtCK,eAAe,GAAG,SAASA,eAAeA,CAAC3D,IAAI,EAAE;QAC/C,OAAOA,IAAI,CAACsD,cAAc,CAAC;MAC7B,CAAC;IACH,CAAC,MAAM,IAAI,OAAOA,cAAc,KAAK,UAAU,EAAE;MAC/CK,eAAe,GAAG,SAASA,eAAeA,CAAC3D,IAAI,EAAE;QAC/C,OAAOsD,cAAc,CAACtD,IAAI,CAAC;MAC7B,CAAC;IACH;EACF,CAAC,MAAM;IACL2D,eAAe,GAAG,SAASA,eAAeA,CAAC3D,IAAI,EAAE1B,GAAG,EAAE;MACpD,OAAOF,MAAM,CAAC4B,IAAI,CAACmC,QAAQ,CAAC,EAAE7D,GAAG,CAAC;IACpC,CAAC;EACH;EACA;EACA,SAASsF,WAAWA,CAAC5D,IAAI,EAAEyC,KAAK,EAAED,MAAM,EAAEqB,SAAS,EAAE;IACnD,IAAIhF,QAAQ,GAAGmB,IAAI,GAAGA,IAAI,CAAC0D,qBAAqB,CAAC,GAAGR,SAAS;IAC7D,IAAI5E,GAAG,GAAG0B,IAAI,GAAGlC,WAAW,CAAC0E,MAAM,CAAClE,GAAG,EAAEmE,KAAK,CAAC,GAAG,GAAG;IACrD,IAAIqB,YAAY,GAAG9D,IAAI,GAAG,EAAE,CAACP,MAAM,CAAC5C,kBAAkB,CAACgH,SAAS,CAAC,EAAE,CAAC7D,IAAI,CAAC,CAAC,GAAG,EAAE;IAC/E;IACA,IAAIA,IAAI,EAAE;MACR,IAAI3B,GAAG,GAAGsF,eAAe,CAAC3D,IAAI,EAAE1B,GAAG,CAAC;MACpC,IAAIuE,IAAI,GAAG;QACT7C,IAAI,EAAEA,IAAI;QACVyC,KAAK,EAAEA,KAAK;QACZnE,GAAG,EAAEA,GAAG;QACRD,GAAG,EAAEA,GAAG;QACR0F,SAAS,EAAEvB,MAAM,CAACxC,IAAI,GAAGwC,MAAM,CAAClE,GAAG,GAAG,IAAI;QAC1C0F,KAAK,EAAExB,MAAM,CAACwB,KAAK,GAAG,CAAC;QACvBC,KAAK,EAAEH;MACT,CAAC;MACDX,QAAQ,CAACN,IAAI,CAAC;IAChB;IACA;IACA,IAAIhE,QAAQ,EAAE;MACZA,QAAQ,CAACU,OAAO,CAAC,UAAU2E,OAAO,EAAEC,QAAQ,EAAE;QAC5CP,WAAW,CAACM,OAAO,EAAEC,QAAQ,EAAE;UAC7BnE,IAAI,EAAEA,IAAI;UACV1B,GAAG,EAAEA,GAAG;UACR0F,KAAK,EAAExB,MAAM,GAAGA,MAAM,CAACwB,KAAK,GAAG,CAAC,GAAG,CAAC;QACtC,CAAC,EAAEF,YAAY,CAAC;MAClB,CAAC,CAAC;IACJ;EACF;EACAF,WAAW,CAAC,IAAI,CAAC;AACnB;AACA;AACA;AACA;AACA,OAAO,SAASQ,qBAAqBA,CAAClB,SAAS,EAAE;EAC/C,IAAImB,KAAK,GAAG/E,SAAS,CAAC1B,MAAM,GAAG,CAAC,IAAI0B,SAAS,CAAC,CAAC,CAAC,KAAKf,SAAS,GAAGe,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChFgF,WAAW,GAAGD,KAAK,CAACC,WAAW;IAC/BC,aAAa,GAAGF,KAAK,CAACE,aAAa;IACnCC,iBAAiB,GAAGH,KAAK,CAACG,iBAAiB;IAC3ClB,cAAc,GAAGe,KAAK,CAACf,cAAc;IACrCE,gBAAgB,GAAGa,KAAK,CAACb,gBAAgB;IACzC/E,UAAU,GAAG4F,KAAK,CAAC5F,UAAU;EAC/B,IAAI;EACJgG,oBAAoB,GAAGnF,SAAS,CAAC1B,MAAM,GAAG,CAAC,GAAG0B,SAAS,CAAC,CAAC,CAAC,GAAGf,SAAS;EACtE;EACA,IAAImG,oBAAoB,GAAGpB,cAAc,IAAImB,oBAAoB;EACjE,IAAIE,WAAW,GAAG,CAAC,CAAC;EACpB,IAAIC,WAAW,GAAG,CAAC,CAAC;EACpB,IAAIC,OAAO,GAAG;IACZF,WAAW,EAAEA,WAAW;IACxBC,WAAW,EAAEA;EACf,CAAC;EACD,IAAIN,WAAW,EAAE;IACfO,OAAO,GAAGP,WAAW,CAACO,OAAO,CAAC,IAAIA,OAAO;EAC3C;EACA5B,iBAAiB,CAACC,SAAS,EAAE,UAAU4B,IAAI,EAAE;IAC3C,IAAI9E,IAAI,GAAG8E,IAAI,CAAC9E,IAAI;MAClByC,KAAK,GAAGqC,IAAI,CAACrC,KAAK;MAClBnE,GAAG,GAAGwG,IAAI,CAACxG,GAAG;MACdD,GAAG,GAAGyG,IAAI,CAACzG,GAAG;MACd0F,SAAS,GAAGe,IAAI,CAACf,SAAS;MAC1BC,KAAK,GAAGc,IAAI,CAACd,KAAK;MAClBC,KAAK,GAAGa,IAAI,CAACb,KAAK;IACpB,IAAIc,MAAM,GAAG;MACX/E,IAAI,EAAEA,IAAI;MACViE,KAAK,EAAEA,KAAK;MACZxB,KAAK,EAAEA,KAAK;MACZpE,GAAG,EAAEA,GAAG;MACRC,GAAG,EAAEA,GAAG;MACR0F,KAAK,EAAEA;IACT,CAAC;IACD,IAAItB,SAAS,GAAGtE,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC;IAChCqG,WAAW,CAACrG,GAAG,CAAC,GAAGyG,MAAM;IACzBH,WAAW,CAAClC,SAAS,CAAC,GAAGqC,MAAM;IAC/B;IACAA,MAAM,CAACvC,MAAM,GAAGmC,WAAW,CAACZ,SAAS,CAAC;IACtC,IAAIgB,MAAM,CAACvC,MAAM,EAAE;MACjBuC,MAAM,CAACvC,MAAM,CAAC3D,QAAQ,GAAGkG,MAAM,CAACvC,MAAM,CAAC3D,QAAQ,IAAI,EAAE;MACrDkG,MAAM,CAACvC,MAAM,CAAC3D,QAAQ,CAACmE,IAAI,CAAC+B,MAAM,CAAC;IACrC;IACA,IAAIR,aAAa,EAAE;MACjBA,aAAa,CAACQ,MAAM,EAAEF,OAAO,CAAC;IAChC;EACF,CAAC,EAAE;IACDvB,cAAc,EAAEoB,oBAAoB;IACpClB,gBAAgB,EAAEA,gBAAgB;IAClC/E,UAAU,EAAEA;EACd,CAAC,CAAC;EACF,IAAI+F,iBAAiB,EAAE;IACrBA,iBAAiB,CAACK,OAAO,CAAC;EAC5B;EACA,OAAOA,OAAO;AAChB;AACA;AACA;AACA;AACA,OAAO,SAASG,gBAAgBA,CAAC3G,GAAG,EAAE4G,KAAK,EAAE;EAC3C,IAAIC,eAAe,GAAGD,KAAK,CAACC,eAAe;IACzCC,eAAe,GAAGF,KAAK,CAACE,eAAe;IACvCC,aAAa,GAAGH,KAAK,CAACG,aAAa;IACnCC,cAAc,GAAGJ,KAAK,CAACI,cAAc;IACrCC,cAAc,GAAGL,KAAK,CAACK,cAAc;IACrCC,kBAAkB,GAAGN,KAAK,CAACM,kBAAkB;IAC7CC,eAAe,GAAGP,KAAK,CAACO,eAAe;IACvCC,YAAY,GAAGR,KAAK,CAACQ,YAAY;IACjCb,WAAW,GAAGK,KAAK,CAACL,WAAW;EACjC,IAAIG,MAAM,GAAGH,WAAW,CAACvG,GAAG,CAAC;EAC7B,IAAIqH,aAAa,GAAG;IAClBC,QAAQ,EAAEtH,GAAG;IACbuH,QAAQ,EAAEV,eAAe,CAACtF,GAAG,CAACvB,GAAG,CAAC;IAClCwH,QAAQ,EAAEV,eAAe,CAACvF,GAAG,CAACvB,GAAG,CAAC;IAClCyH,MAAM,EAAEV,aAAa,CAACxF,GAAG,CAACvB,GAAG,CAAC;IAC9B0H,OAAO,EAAEV,cAAc,CAACzF,GAAG,CAACvB,GAAG,CAAC;IAChC2H,OAAO,EAAEV,cAAc,CAAC1F,GAAG,CAACvB,GAAG,CAAC;IAChC4H,WAAW,EAAEV,kBAAkB,CAAC3F,GAAG,CAACvB,GAAG,CAAC;IACxCC,GAAG,EAAEqB,MAAM,CAACoF,MAAM,GAAGA,MAAM,CAACzG,GAAG,GAAG,EAAE,CAAC;IACrCkE,MAAM,EAAEuC,MAAM,CAACvC,MAAM;IACrB;IACA;IACA;IACA0D,QAAQ,EAAEV,eAAe,KAAKnH,GAAG,IAAIoH,YAAY,KAAK,CAAC;IACvDU,cAAc,EAAEX,eAAe,KAAKnH,GAAG,IAAIoH,YAAY,KAAK,CAAC,CAAC;IAC9DW,iBAAiB,EAAEZ,eAAe,KAAKnH,GAAG,IAAIoH,YAAY,KAAK;EACjE,CAAC;EACD,OAAOC,aAAa;AACtB;AACA,OAAO,SAASW,2BAA2BA,CAAC7F,KAAK,EAAE;EACjD,IAAIqC,IAAI,GAAGrC,KAAK,CAACqC,IAAI;IACnB+C,QAAQ,GAAGpF,KAAK,CAACoF,QAAQ;IACzBC,QAAQ,GAAGrF,KAAK,CAACqF,QAAQ;IACzBG,OAAO,GAAGxF,KAAK,CAACwF,OAAO;IACvBF,MAAM,GAAGtF,KAAK,CAACsF,MAAM;IACrBC,OAAO,GAAGvF,KAAK,CAACuF,OAAO;IACvBE,WAAW,GAAGzF,KAAK,CAACyF,WAAW;IAC/BC,QAAQ,GAAG1F,KAAK,CAAC0F,QAAQ;IACzBC,cAAc,GAAG3F,KAAK,CAAC2F,cAAc;IACrCC,iBAAiB,GAAG5F,KAAK,CAAC4F,iBAAiB;IAC3C9H,GAAG,GAAGkC,KAAK,CAAClC,GAAG;IACfgI,MAAM,GAAG9F,KAAK,CAAC8F,MAAM;IACrBX,QAAQ,GAAGnF,KAAK,CAACmF,QAAQ;EAC3B,IAAIY,SAAS,GAAGzJ,QAAQ,CAACA,QAAQ,CAAC;IAChC0J,OAAO,EAAE3D;EACX,CAAC,EAAEA,IAAI,CAAC,EAAE;IACR+C,QAAQ,EAAEA,QAAQ;IAClBC,QAAQ,EAAEA,QAAQ;IAClBG,OAAO,EAAEA,OAAO;IAChBF,MAAM,EAAEA,MAAM;IACdC,OAAO,EAAEA,OAAO;IAChBE,WAAW,EAAEA,WAAW;IACxBC,QAAQ,EAAEA,QAAQ;IAClBC,cAAc,EAAEA,cAAc;IAC9BC,iBAAiB,EAAEA,iBAAiB;IACpC9H,GAAG,EAAEA,GAAG;IACRgI,MAAM,EAAEA,MAAM;IACdX,QAAQ,EAAEA,QAAQ;IAClBtH,GAAG,EAAEsH;EACP,CAAC,CAAC;EACF,IAAI,EAAE,OAAO,IAAIY,SAAS,CAAC,EAAE;IAC3BlJ,MAAM,CAACoJ,cAAc,CAACF,SAAS,EAAE,OAAO,EAAE;MACxCG,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;QAClB1I,OAAO,CAAC,KAAK,EAAE,uIAAuI,CAAC;QACvJ,OAAOwC,KAAK;MACd;IACF,CAAC,CAAC;EACJ;EACA,OAAO+F,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}